{"version":3,"sources":["logo.svg","components/Name.js","components/ColorPicker.js","components/WindowSize.js","components/Canvas.js","components/Refresh.js","components/Paint.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NameInput","styled","input","Name","React","memo","useState","name","setName","type","value","onChange","e","target","placeholder","StyledColorPicker","fieldset","ColorPicker","colors","activeColor","setActiveColor","length","map","color","i","key","checked","style","background","WindowDiv","div","WindowSize","width","window","innerWidth","height","innerHeight","windowSize","setWindowSize","visible","setVisible","useEffect","timeoutId","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","className","Canvas","props","canvasRef","createRef","handleMouseMove","bind","startDrawing","stopDrawing","state","drawing","this","setState","ctx","current","getContext","coords","clientX","offsetLeft","clientY","offsetTop","lineTo","stroke","temp","getImageData","putImageData","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","moveTo","closePath","Fragment","ref","onMouseDown","onMouseUp","onMouseOut","onMouseMove","Component","StyledButton","button","cb","onClick","PaintHeader","header","Paint","getColors","useCallback","baseColor","randomColor","slice","fetch","then","res","json","setColors","hex","headerRef","useRef","offsetHeight","windowsizeRef","borderTop","marginTop","Refresh","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66783ec7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\n\nconst NameInput = styled.input`\n  width: 100%;\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  background: transparent;\n  border: none;\n  text-overflow: ellipsis;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 5px 10px 5px 10px;\n\n  border-bottom: 1px solid transparent;\n  display: block;\n  &:hover,\n  &:focus {\n    border-bottom: 1px solid gray;\n    outline: none;\n  }\n\n  &:not(:focus) {\n    cursor: pointer;\n  }\n`;\n\nconst Name = React.memo(() => {\n  const [name, setName] = useState('');\n  return (\n    <div>\n      <NameInput\n        type=\"text\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        placeholder=\"Untitled\"\n      />\n    </div>\n  );\n});\n\nexport default Name;\n","import React, { useState, useEffect } from 'react';\nimport randomColor from 'randomcolor';\nimport styled from 'styled-components';\n\nconst StyledColorPicker = styled.fieldset`\n  border: none;\n  padding: 0;\n\n  input {\n    opacity: 0;\n    position: absolute;\n  }\n  span {\n    content: '';\n    display: inline-block;\n    width: 1.5rem;\n    height: 1.5rem;\n    margin: 5px 15px;\n    border: 2px solid black;\n    transition: 0.3s;\n  }\n  label {\n    cursor: pointer;\n  }\n  label:hover span {\n    transform: rotate(45deg);\n  }\n  input:checked + span {\n    transform: scale(1.5);\n  }\n`;\n\nconst ColorPicker = ({ colors = [], activeColor, setActiveColor }) => {\n  if (!colors.length) return null;\n  return (\n    <StyledColorPicker>\n      {colors.map((color, i) => (\n        <label key={i}>\n          <input\n            name=\"color\"\n            type=\"radio\"\n            value={color}\n            checked={activeColor === color}\n            onChange={() => setActiveColor(color)}\n          />\n          <span style={{ background: color }} />\n        </label>\n      ))}\n    </StyledColorPicker>\n  );\n};\n\nexport default ColorPicker;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst WindowDiv = styled.div`\nposition: absolute;\nbottom: 5px;\nleft: 50%;\ntransform: translateX(-50%);\nborder: 1px solid black;\ncolor: black;\npadding: 5px;\n}\n&.hidden {\nopacity: 0;\ntransition: 1s;\nvisibility: hidden;\n}\n`;\n\nexport default function WindowSize() {\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  const [visible, setVisible] = useState(false);\n  useEffect(() => {\n    let timeoutId;\n    const handleResize = () => {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n      setVisible(true);\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setVisible(false), 500);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return (\n    <WindowDiv className={`window-size ${visible ? '' : 'hidden'}`}>\n      {windowSize.width} x {windowSize.height}\n    </WindowDiv>\n  );\n}\n","import React from 'react';\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.startDrawing = this.startDrawing.bind(this);\n    this.stopDrawing = this.stopDrawing.bind(this);\n    this.state = {\n      drawing: false,\n      width: window.innerWidth,\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      width: window.innerWidth - 15,\n      height: window.innerHeight,\n    });\n    this.ctx = this.canvasRef.current.getContext('2d');\n    window.addEventListener('resize', this.handleResize);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n  handleMouseMove(e) {\n    // actual coordinates\n    const coords = [\n      e.clientX - this.canvasRef.current.offsetLeft,\n      e.clientY - this.canvasRef.current.offsetTop,\n    ];\n    if (this.state.drawing) {\n      this.ctx.lineTo(...coords);\n      this.ctx.stroke();\n    }\n    if (this.props.handleMouseMove) {\n      this.props.handleMouseMove(...coords);\n    }\n  }\n  handleResize() {\n    const temp = this.ctx.getImageData(\n      0,\n      0,\n      this.state.width,\n      this.state.height\n    );\n    this.setState({\n      width: window.innerWidth - 15,\n      height: window.innerHeight,\n    });\n    this.ctx.putImageData(temp, 0, 0);\n  }\n  startDrawing(e) {\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.ctx.lineWidth = 10;\n    this.ctx.strokeStyle = this.props.color;\n    this.ctx.beginPath();\n    // actual coordinates\n    this.ctx.moveTo(\n      e.clientX - this.canvasRef.current.offsetLeft,\n      e.clientY - this.canvasRef.current.offsetTop\n    );\n    this.setState({ drawing: true });\n  }\n  stopDrawing() {\n    this.ctx.closePath();\n    this.setState({ drawing: false });\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <canvas\n          ref={this.canvasRef}\n          width={this.props.width || this.state.width}\n          height={this.props.height || this.state.height}\n          onMouseDown={this.startDrawing}\n          onMouseUp={this.stopDrawing}\n          onMouseOut={this.stopDrawing}\n          onMouseMove={this.handleMouseMove}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  border: 0;\n  background: none;\n  cursor: pointer;\n  font-size: 2rem;\n`;\nexport default React.memo(({ cb }) => {\n  return (\n    <StyledButton className=\"button-refresh-colors\" onClick={cb}>\n      &#8634;\n    </StyledButton>\n  );\n});\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Name from './Name';\nimport ColorPicker from './ColorPicker';\nimport randomColor from 'randomcolor';\nimport WindowSize from './WindowSize';\nimport Canvas from './Canvas';\nimport RefreshButton from './Refresh';\n\nimport styled from 'styled-components';\n\nconst PaintHeader = styled.header`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  border-bottom: 1px solid black;\n  > div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst Paint = () => {\n  const [activeColor, setActiveColor] = useState('');\n\n  const getColors = useCallback(() => {\n    const baseColor = randomColor().slice(1);\n    fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\n      .then((res) => res.json())\n      .then((res) => {\n        setColors(res.colors.map((color) => color.hex.value));\n        setActiveColor(res.colors[0].hex.value);\n      });\n  }, []);\n  const [colors, setColors] = useState();\n  useEffect(() => {\n    getColors();\n  }, []);\n\n  const headerRef = useRef({ offsetHeight: 0 });\n  const windowsizeRef = useRef({ offsetHeight: 0 });\n  return (\n    <div className=\"app\">\n      <PaintHeader\n        ref={headerRef}\n        style={{ borderTop: `10px solid ${activeColor}` }}\n      >\n        <Name />\n        <div style={{ marginTop: 10 }}>\n          <ColorPicker\n            colors={colors}\n            activeColor={activeColor}\n            setActiveColor={setActiveColor}\n          />\n          <RefreshButton cb={getColors} />\n        </div>\n      </PaintHeader>\n      {activeColor && (\n        <Canvas\n          color={activeColor}\n          height={\n            window.innerHeight -\n            headerRef.current.offsetHeight -\n            windowsizeRef.current.offsetHeight\n          }\n        />\n      )}\n      <div ref={windowsizeRef}>\n        <WindowSize />\n      </div>\n    </div>\n  );\n};\n\nexport default Paint;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Paint from './components/Paint';\n\nfunction App() {\n  return <Paint />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}